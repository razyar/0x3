'''
Not recommended for slow systems :) (ex: mine) :))))
include: main.py 

'''
import sys


def _0x3_buff(size):
	if size:
		_0x3_F = open('Dracarys.0x3', 'w')
		global _0x3_B
		_0X3_B = '\x20\x21'+'0x3'*0x1000
		_0x3_Jump = _0X3_B*0x1000*0x3 #change b_JUMP size base on your memory 
		_0x3_Jump += _0X3_B*0x1000*0x3 #bypass memory error :)
		_0x3_Jump += _0X3_B*0x1101*0x3; _0x3_Jump += _0X3_B*0x1011*0x3
		_0x3_Jump += _0X3_B*0x1010*0x3; _0x3_Jump += _0X3_B*0x1011*0x3 
		_0x3_Jump += _0X3_B*0x800*0x3; _0x3_Jump += _0X3_B*0x1011*0x3; _0x3_Jump += _0X3_B*0x1011*0x3
		_0x3_Jump += _0X3_B*0x1191*0x3; _0x3_Jump += _0X3_B*0x1011*0x3;_0x3_Jump += _0X3_B*0x1011*0x3
		_0x3_Jump += _0X3_B*0x1001*0x3; _0x3_Jump += _0X3_B*0x1011*0x3;_0x3_Jump += _0X3_B*0x1011*0x3
		_0x3_Jump += _0X3_B*0x1011*0x3; _0x3_Jump += _0X3_B*0x1011*0x3
		_0x3_Jump += _0X3_B*0x1011*0x3; _0x3_Jump += _0X3_B*0x1011*0x3
		try:
			_0x3_F.write(_0x3_Jump); _0x3_F.write(_0x3_Jump) 
			_0x3_F.write(_0x3_Jump); _0x3_F.write(_0x3_Jump) 
			_0x3_F.write(_0x3_Jump); _0x3_F.write(_0x3_Jump);_0x3_F.write(_0x3_Jump); _0x3_F.write(_0x3_Jump)
			_0x3_F.write(_0x3_Jump); _0x3_F.write(_0x3_Jump);_0x3_F.write(_0x3_Jump); _0x3_F.write(_0x3_Jump)
			_0x3_F.write(_0x3_Jump); _0x3_F.write(_0x3_Jump);_0x3_F.write(_0x3_Jump); _0x3_F.write(_0x3_Jump)
			_0x3_F.close()
		except Exception as _0x3_err:
			sys.exit(_0x3_err)



_0x3_buff(1000)